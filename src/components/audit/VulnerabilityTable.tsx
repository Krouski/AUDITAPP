import React from 'react';
import { Card, Table, TableHead, TableRow, TableHeaderCell, TableBody, TableCell, Badge } from '@tremor/react';
import { Vulnerability } from '../../types';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  onEdit: (vulnerability: Vulnerability) => void;
  onDelete: (id: string) => void;
}

export default function VulnerabilityTable({ vulnerabilities, onEdit, onDelete }: VulnerabilityTableProps) {
  const getSeverityColor = (severity: string) => {
    const colors = {
      Critical: 'red',
      High: 'orange',
      Moderate: 'yellow',
      Low: 'green',
    };
    return colors[severity as keyof typeof colors] || 'gray';
  };

  const getStatusColor = (status: string) => {
    const colors = {
      Resolved: 'green',
      'In Progress': 'yellow',
      Unresolved: 'red',
    };
    return colors[status as keyof typeof colors] || 'gray';
  };

  return (
    <Card>
      <Table>
        <TableHead>
          <TableRow>
            <TableHeaderCell>Name</TableHeaderCell>
            <TableHeaderCell>Severity</TableHeaderCell>
            <TableHeaderCell>Status</TableHeaderCell>
            <TableHeaderCell>Deadline</TableHeaderCell>
            <TableHeaderCell>Affected Systems</TableHeaderCell>
            <TableHeaderCell>Actions</TableHeaderCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {vulnerabilities.map((vulnerability) => (
            <TableRow key={vulnerability.id}>
              <TableCell>{vulnerability.name}</TableCell>
              <TableCell>
                <Badge color={getSeverityColor(vulnerability.severity)}>
                  {vulnerability.severity}
                </Badge>
              </TableCell>
              <TableCell>
                <Badge color={getStatusColor(vulnerability.status)}>
                  {vulnerability.status}
                </Badge>
              </TableCell>
              <TableCell>{new Date(vulnerability.deadline).toLocaleDateString()}</TableCell>
              <TableCell>{vulnerability.affectedSystems.join(', ')}</TableCell>
              <TableCell>
                <div className="flex space-x-2">
                  <button
                    onClick={() => onEdit(vulnerability)}
                    className="text-blue-600 hover:text-blue-800"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => onDelete(vulnerability.id)}
                    className="text-red-600 hover:text-red-800"
                  >
                    Delete
                  </button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </Card>
  );
}